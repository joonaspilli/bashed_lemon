#!/usr/bin/env bash

submod_bspwm_visual_create_pattern () {
	local line pattern
	if [[ -n "$@" ]]; then
		while read line; do
			[[ -n "$pattern" ]] && pattern+='|'
			pattern+="(^$line\$)"
		done <<< "$@"
	fi
	printf '%s' "$pattern"
}

submod_bspwm_visual () {
	local -r STATUS="$1"
	local -r OCC_FOCUSED=$(grep -Po '(?<=:(O|U)).+?(?=:)' <<< "$STATUS")
	local -r FOCUSED=$(grep -Po '(?<=:(F|U)).+?(?=:)' <<< "$STATUS")
	local -r URGENT=$(grep -Poi '(?<=:U).+?(?=:)' <<< "$STATUS")
	local -r OCCUPIED=$(grep -Poi '(?<=:(O|U)).+?(?=:)' <<< "$STATUS")
	local desktops=$(bspc query -D --names)
	local pattern
	# Occupied focused desktops
	pattern=$(submod_bspwm_visual_create_pattern "$OCC_FOCUSED")
	if [[ -n "$pattern" ]]; then
		desktops=$(sed -E "s/$pattern/$(decorate -pf "$(color 'HIGHLIGHT')" -b "$(color 'NOTIFY')" -u "$(color 'HIGHLIGHT')" "\0")/" <<< "$desktops")
	fi
	# Focused desktops
	pattern=$(submod_bspwm_visual_create_pattern "$FOCUSED")
	if [[ -n "$pattern" ]]; then
		desktops=$(sed -E "s/$pattern/$(notify "\0")/" <<< "$desktops")
	fi
	# Urgent desktops
	pattern=$(submod_bspwm_visual_create_pattern "$URGENT")
	if [[ -n "$pattern" ]]; then
		desktops=$(sed -E "s/$pattern/$(alert "\0")/" <<< "$desktops")
	fi
	# Occupied desktops
	pattern=$(submod_bspwm_visual_create_pattern "$OCCUPIED")
	if [[ -n "$pattern" ]]; then
		desktops=$(\
			sed -E "s/$pattern/$(decorate -u "$(color 'NOTIFY')" "\0")/"\
			<<< "$desktops"\
		)
	fi
	# Format to a single line and print
	desktops=$(tr '\n' ' ' <<< "$desktops")
	desktops=${desktops}
	printf '%s' "$desktops"
}

submod_bspwm_focused_monitor () {
	local -r STATUS="$1"
	local -r MONITOR=$(grep -Po '(?<=(W|:)M).+?(?=:)' <<< "$STATUS")
	if (( $(bspc query -M | wc -l) > 1 )); then
		local -r PRIMARY_MONITOR=$(xrandr -q |\
			grep -Po '^.*(?= connected primary)')
		if [[ "$MONITOR" == "$PRIMARY_MONITOR" ]]; then
			print_nothing
		else
			notify "$MONITOR"
		fi
	else
		print_nothing
	fi
}

submod_bspwm_focused_desktops () {
	local -r STATUS="$1"
	local output=$(\
		grep -Po '((?<=:(O|F|U)).+?(?=:))|((?<=:L)T|M(?=:|$))' <<< "$STATUS" |\
		tr '\n' ' '\
	)
	local output="${output%?}"
	[[ -n "$output" ]] && printf '%s' "$output" || print_nothing
}

submod_bspwm_occupied_desktops () {
	local -r STATUS="$1"
	local output=$(\
		grep -Poi '(?<=:(O|U)).+?(?=:)' <<< "$STATUS" |\
		tr '\n' ' '\
	)
	local output="${output%?}"
	[[ -n "$output" ]] && printf '%s' "$output" || print_nothing
}

submod_bspwm_urgent_desktops () {
	local -r STATUS="$1"
	local output=$(\
		grep -Poi '(?<=:U).+?(?=:)' <<< "$STATUS" |\
		tr '\n' ' '\
	)
	local output="${output%?}"
	[[ -n "$output" ]] && alert "URGENT $output" || print_nothing
}

mod_bspwm () {
	local OPTIND arg flag_s flag_v
	while getopts ':s:v' arg; do
		case "$arg" in
			s) flag_s="$OPTARG" ;;
			v) flag_v=1;;
		esac
	done
	shift $((OPTIND-1))
	local -r SEP=${flag_s-$(setting 'MODULE_SEPARATOR')}
	local -r VISUAL=${flag_v:-0}
	local -r PAD=$(setting 'MODULE_PADDING')
	if (( VISUAL )); then
		local -r SUBMODS=(
			submod_bspwm_focused_monitor
			submod_bspwm_visual
		)
	else
		local -r SUBMODS=(
			submod_bspwm_focused_monitor
			submod_bspwm_focused_desktops
			submod_bspwm_occupied_desktops
			submod_bspwm_urgent_desktops
		)
	fi
	local bspwm_status
	local prev_status
	bspc subscribe report | while read bspwm_status; do
		# Ignore irrelevant changes
		[[ "$bspwm_status" == "$prev_status" ]] && continue
		prev_status="$bspwm_status"
		local line=
		local add_sep=0
		local submod
		for submod in "${SUBMODS[@]}"; do
			local output=$($submod "$bspwm_status")
			[[ "$output" == "$GLOBAL_NOTHING" ]] && continue
			if (( add_sep )); then
				line+="$PAD$SEP$PAD"
			else
				add_sep=1
			fi
			line+="$output"
		done
		print_module "$1" "$line"
	done
}
